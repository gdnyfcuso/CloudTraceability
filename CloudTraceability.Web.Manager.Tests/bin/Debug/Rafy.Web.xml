<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy.Web</name>
    </assembly>
    <members>
        <member name="T:Rafy.Web.EntityDataPortal.EntityListReader">
            <summary>
            一般实体列表的读取器
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.ListReader">
            <summary>
            Json 到 EntityList 的读取器
            </summary>
        </member>
        <member name="M:Rafy.Web.EntityDataPortal.ListReader.JsonToEntity(Newtonsoft.Json.Linq.JObject,Rafy.Domain.EntityRepository,Rafy.Domain.EntityList)">
            <summary>
            把实体列表对应的 json 转换为 EntityList 对象。
            </summary>
            <param name="jEntityList"></param>
            <param name="repository">如果没有显式指定 Repository，则会根据 json 中的 _model 属性来查找对应的实体仓库。</param>
            <param name="resultEntityList">如果显式指定 Repository，则会把转换的实体对象都加入到这个列表中。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.EntityJsonConverter">
            <summary>
            Entity 与 Json 相互转换的类
            </summary>
        </member>
        <member name="M:Rafy.Web.EntityDataPortal.EntityJsonConverter.JsonToEntityList(Newtonsoft.Json.Linq.JObject,Rafy.Domain.EntityRepository)">
            <summary>
            把实体列表对应的 json 转换为 EntityList 对象。
            </summary>
            <param name="jEntityList"></param>
            <param name="repository">如果没有显式指定 Repository，则会根据 json 中的 _model 属性来查找对应的实体仓库。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.EntityPropertySetter">
            <summary>
            实体属性的设置器
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.TreeEntityListReader">
            <summary>
            树型列表的读取器
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.EntityJson">
            <summary>
            实体数据类
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.TreeEntityJson">
            <summary>
            树型实体数据类
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.EntityJsonList">
            <summary>
            客户端 json 实体列表
            </summary>
        </member>
        <member name="P:Rafy.Web.EntityDataPortal.EntityJsonList.total">
            <summary>
            实体列表的实际总量。
            
            分页时，实际量和当前量是不一致的。
            </summary>
        </member>
        <member name="P:Rafy.Web.EntityDataPortal.EntityJsonList.model">
            <summary>
            客户端实体类型
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortal.RootTreeEntityJson">
            <summary>
            树型根对象的 json 实体
            </summary>
        </member>
        <member name="T:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter">
            <summary>
            负责完成实体的序列化、反序列化。
            同时使用 JSON.NET 完成其它对象的序列化、反序列化。
            </summary>
        </member>
        <member name="P:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.SerializeAsCamelProperty">
            <summary>
            是否使用舵峰式。 默认为 true。
            </summary>
            <value>
              <c>true</c> if [use camel property]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.SerializeResult(Rafy.Result,Newtonsoft.Json.JsonTextWriter)">
            <summary>
            使用指定的 JsonTextWriter 来序列化 Result 类型。
            </summary>
            <param name="res"></param>
            <param name="jw"></param>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.SerializeDomainComponent(Rafy.Domain.IDomainComponent,Newtonsoft.Json.JsonTextWriter)">
            <summary>
            使用指定的 JsonTextWriter 来序列化 <see cref="T:Rafy.Domain.IDomainComponent"/> 类型。
            </summary>
            <param name="value"></param>
            <param name="jw"></param>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.DeserializeDomainComponent(System.Type,System.String,System.String)">
            <summary>
            反序列化 <see cref="T:Rafy.Domain.IDomainComponent"/> 类型。
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.CreateSerializer">
            <summary>
            创建一个 <see cref="T:Rafy.Domain.Serialization.Json.AggtSerializer"/> 的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.CreateDeserializer">
            <summary>
            创建一个 <see cref="T:Rafy.Domain.Serialization.Json.AggtDeserializer"/> 的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.CreateJsonWriter(System.IO.Stream,System.Net.Http.HttpContent)">
            <summary>
            创建一个用于序列化的 JsonTextWriter。
            </summary>
            <param name="writeStream"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.DeserializeByJsonSerializer(System.Type,System.IO.Stream,System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            这个方法 Copy 自 ASP.NET MVC 源码。
            </summary>
            <param name="type"></param>
            <param name="readStream"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Http.EntityAwareJsonMediaTypeFormatter.SerializeByJsonSerializer(System.Object,Newtonsoft.Json.JsonTextWriter)">
            <summary>
            使用 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 来进行序列化。
            </summary>
            <param name="value"></param>
            <param name="jsonTextWriter"></param>
        </member>
        <member name="T:Rafy.Web.Http.IdFromRouteFormatterParameterBinding">
            <summary>
            这个类型扩展了类型，
            使得传入 EntityAwareJsonMediaTypeFormatter 中的 HttpContent 不但有来自 Body 的数据，
            也有来自路由的一些值（目前就是 Id）。
            
            实现的功能：PUT 更新数据时，Id 应该从 Url 中提取，而不是在 Json Body 中。
            </summary>
        </member>
        <member name="T:Rafy.Web.Http.HttpRegister">
            <summary>
            WebApi 注册器。
            </summary>
        </member>
        <member name="P:Rafy.Web.Http.HttpRegister.Formatter">
            <summary>
            负责完成实体的序列化、反序列化。
            同时使用 JSON.NET 完成其它对象的序列化、反序列化。
            </summary>
        </member>
        <member name="M:Rafy.Web.Http.HttpRegister.Register(System.Web.Http.HttpConfiguration)">
            <summary>
            在 HttpConfiguration 中注册一些必要的绑定器。
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:Rafy.Web.Json.DynamicJsonModel">
            <summary>
            可添加动态属性的 json 序列化对象
            </summary>
        </member>
        <member name="P:Rafy.Web.Json.DynamicJsonModel.HasDynamicProperty">
            <summary>
            是否已经添加了任何的动态属性
            </summary>
        </member>
        <member name="T:Rafy.Web.Json.JsonModel">
            <summary>
            一个简单的 json 序列化基类。（不支持反序列化）
            </summary>
        </member>
        <member name="M:Rafy.Web.Json.JsonModel.ToJsonString">
            <summary>
            返回当前对象对应的 json 字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Json.JsonModel.ToJson(Rafy.Web.Json.LiteJsonWriter)">
            <summary>
            子类重写此方法来实现 json 序列化的自定义。
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Rafy.Web.Json.JsonModel.WriteAllProperties(Rafy.Web.Json.LiteJsonWriter)">
            <summary>
            Writes all properties by reflection.
            </summary>
            <param name="json">The json writer.</param>
        </member>
        <member name="T:Rafy.Web.Json.LiteJsonWriter">
            <summary>
            轻量级的 Json Writer
            </summary>
        </member>
        <member name="M:Rafy.Web.Json.LiteJsonWriter.Convert(Rafy.Web.Json.JsonModel)">
            <summary>
            Converts the specified model to json.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.Json.LiteJsonWriter.WritePropertyIf(System.String,System.Object)">
            <summary>
            Writes the property if value is not null.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Web.Json.LiteJsonWriter.WriteProperty(System.String,System.Object)">
            <summary>
            Writes the property.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ClientMetaFactory">
            <summary>
            客户端元数据的生成类
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ClientAggtMeta">
            <summary>
            客户端的聚合元数据
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientAggtMeta.childProperty">
            <summary>
            如果当前聚合块是一个子类型，则这个属性表示这个聚合子类型在聚合父类型中的集合属性名称。
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientAggtMeta.layoutClass">
            <summary>
            当前聚合块使用哪种布局。
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientAggtMeta.mainBlock">
            <summary>
            当前聚合块中主块
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientAggtMeta.children">
            <summary>
            所有的子聚合块
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientAggtMeta.surrounders">
            <summary>
            所有的环绕块
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.SurrounderMeta">
            <summary>
            环绕块
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.SurrounderMeta.surrounderType">
            <summary>
            环绕类型
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.JavascriptType">
            <summary>
            支持的 javascript 数据类型
            </summary>
        </member>
        <member name="F:Rafy.Web.ClientMetaModel.JavascriptType.Reference">
            <summary>
            自定义的外键引用类型
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ServerType">
            <summary>
            服务器类型的表示器
            </summary>
        </member>
        <member name="F:Rafy.Web.ClientMetaModel.ServerType.Name">
            <summary>
            服务端类型的标识
            </summary>
        </member>
        <member name="F:Rafy.Web.ClientMetaModel.ServerType.RuntimeType">
            <summary>
            运行时类型
            </summary>
        </member>
        <member name="F:Rafy.Web.ClientMetaModel.ServerType.IsNullable">
            <summary>
            是否可空。
            </summary>
        </member>
        <member name="F:Rafy.Web.ClientMetaModel.ServerType.JSType">
            <summary>
            对应的 javascript 类型
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ClientResult">
            <summary>
            客户端常用的结果返回值
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientResult.Success">
            <summary>
            是否操作成功
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientResult.Message">
            <summary>
            操作的友好提示信息
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.BelongsToAssociation">
            <summary>
            多对一关联关系字义
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.EntityAssociation">
            <summary>
            实体关系定义的基类
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.EntityField">
            <summary>
            实体字段定义
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.EntityModel">
            <summary>
            客户端的实体模型定义
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.EntityModel.isTree">
            <summary>
            实体是否是树型对象。
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.EntityModel.fields">
            <summary>
            实体字段
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.EntityModel.associations">
            <summary>
            实体关系
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.HasManyAssociation">
            <summary>
            多关联 关系
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ClientEntityViewMeta">
            <summary>
            客户端的某一小块的元数据定义
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.model">
            <summary>
            对应的客户端类的名称
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.viewName">
            <summary>
            如果当前块不是默认视图，则这个属性表示它的扩展视图名称
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.label">
            <summary>
            当前模型的友好名称
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.groupBy">
            <summary>
            如果是列表，则按哪个属性分组。
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.gridConfig">
            <summary>
            如果此块是列表，则这是客户端 ExtGrid/ExtTreeGrid 的配置项
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.formConfig">
            <summary>
            如果此块是表单，则这是客户端 ExtForm 的配置项
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ClientEntityViewMeta.storeConfig">
            <summary>
            列表块中所用的 Store 配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ComboBoxConfig">
            <summary>
            下拉框编辑器的配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ComboListConfig">
            <summary>
            下拉列表编辑器的配置
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ComboListConfig.model">
            <summary>
            下拉列表中显示的实体名称。
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.ComboListConfig.dataSourceProperty">
            <summary>
            如果是自定义数据源，则这个属性表示自定义数据源的属性名称。
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.EnumBoxConfig">
            <summary>
            枚举的编辑器配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.FieldConfig">
            <summary>
            字段编辑器的配置
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.FieldConfig.visibilityIndicator">
            <summary>
            这个属性不为空，表明是否需要动态根据某个属性来设置本编辑器的显示或者隐藏。
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.FormConfig">
            <summary>
            表单的配置
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.FormConfig.tbar">
            <summary>
            表单所用的工具条配置
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.FormConfig.items">
            <summary>
            表单中所有字段的配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.TextFieldConfig">
            <summary>
            文本框配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.GridColumnConfig">
            <summary>
            列表中某一列的配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.GridConfig">
            <summary>
            列表/树型列表的配置
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.GridConfig.tbar">
            <summary>
            工具栏配置项
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.GridConfig.columns">
            <summary>
            列配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.AbstractStoreConfig">
            <summary>
            数据源配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ArrayStoreConfig">
            <summary>
            数组数据源配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.StoreConfig">
            <summary>
            列表数据源配置
            </summary>
        </member>
        <member name="P:Rafy.Web.ClientMetaModel.StoreConfig.pageSize">
            <summary>
            大于等于 10000 就不会再分页了。
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.TreeStoreConfig">
            <summary>
            树型数据源的配置
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientMetaModel.ToolbarItem">
            <summary>
            某个工具栏项的配置
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityDataPortalHandler">
            <summary>
            实体数据门户：CRUD
            </summary>
        </member>
        <member name="T:Rafy.Web.JavascriptHandler">
            <summary>
            响应为 js 的门户基类
            </summary>
        </member>
        <member name="M:Rafy.Web.JavascriptHandler.CacheCompress(System.Web.HttpContext,System.String,System.Func{System.String})">
            <summary>
            缓存 + 压缩
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <param name="producer"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Web.Mvc.EntityAwareBinder">
            <summary>
            MVC 中能直接识别 Rafy Entity 模型绑定器。
            MVC 中直接使用 Entity 作为视图模型时，为了能在更新数据时更好地结合框架，需要使用此绑定器来更新实体。
            </summary>
        </member>
        <member name="T:Rafy.Web.MetaModelPortalHandler">
            <summary>
            元数据门户
            </summary>
        </member>
        <member name="T:Rafy.Web.RafyPluginsScriptHandler">
            <summary>
            Rafy 所有命令的生成门户
            </summary>
        </member>
        <member name="T:Rafy.Web.RafyCommandsScriptHandler">
            <summary>
            Rafy 所有命令的生成门户
            </summary>
        </member>
        <member name="T:Rafy.Web.RafyEntityScriptHandler">
            <summary>
            Rafy 实体定义脚本门户
            </summary>
        </member>
        <member name="T:Rafy.Web.EntityModelGenerator">
            <summary>
            实体定义脚本的生成器
            </summary>
        </member>
        <member name="T:Rafy.Web.RafyScriptHandler">
            <summary>
            Rafy 脚本门户
            </summary>
        </member>
        <member name="M:Rafy.Web.RafyScriptHandler.GetStream_Debugging(System.Reflection.Assembly,System.String)">
            <summary>
            这个类主要是方便 Rafy JS 的开发人员使用：
            在修改 Rafy JS 后，不需要编译这个项目，此 Handler 会直接访问硬盘。
            </summary>
        </member>
        <member name="T:Rafy.Web.GetCustomDataSourceService">
            <summary>
            本服务用于为 ComboList 编辑器提供自定义的属性数据源
            </summary>
        </member>
        <member name="P:Rafy.Web.GetCustomDataSourceService.Entity">
            <summary>
            为这个实体提供数据源
            </summary>
        </member>
        <member name="P:Rafy.Web.GetCustomDataSourceService.DataSourceProperty">
            <summary>
            使用这个数据源属性
            </summary>
        </member>
        <member name="P:Rafy.Web.GetCustomDataSourceService.DataSource">
            <summary>
            数据源实体列表
            </summary>
        </member>
        <member name="T:Rafy.Web.JsonServiceRepository">
            <summary>
            所有 JsonService 的管理类
            </summary>
        </member>
        <member name="M:Rafy.Web.JsonServiceRepository.Invoke(System.String,System.String)">
            <summary>
            Invokes the specified service name.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="jsonInput">The json input.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Rafy.Web.JsonServiceRepository.SetInputProperties(Rafy.Domain.IService,System.String,System.Reflection.PropertyInfo[])">
            <summary>
            参数输入
            </summary>
            <param name="service"></param>
            <param name="jsonInput"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Rafy.Web.JsonServiceRepository.ReadOutputProperties(Rafy.Domain.IService,System.Reflection.PropertyInfo[],Rafy.Web.Json.DynamicJsonModel)">
            <summary>
            结果输出
            </summary>
            <param name="service"></param>
            <param name="properties"></param>
            <param name="res"></param>
        </member>
        <member name="T:Rafy.Web.ServiceInvokerHandler">
            <summary>
            服务调用门户
            </summary>
        </member>
        <member name="T:Rafy.Web.WebApp">
            <summary>
            WebApp 启动环境
            </summary>
        </member>
        <member name="T:Rafy.Web.WebAppStarter">
            <summary>
            封装启动领域应用程序的逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Web.WebAppStarter.#ctor(System.Web.HttpApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Web.WebAppStarter"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rafy.Web.WebAppStarter.Start(Rafy.Domain.DomainApp)">
            <summary>
            把指定的领域应用程序启动。
            </summary>
            <param name="app">The application.</param>
            <exception cref="T:System.ArgumentNullException">app</exception>
        </member>
    </members>
</doc>
