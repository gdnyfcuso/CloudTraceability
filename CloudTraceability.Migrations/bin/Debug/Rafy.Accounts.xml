<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy.Accounts</name>
    </assembly>
    <members>
        <member name="T:Rafy.Accounts.AccountContext">
            <summary>
            帐户插件的上下文数据。
            </summary>
        </member>
        <member name="F:Rafy.Accounts.AccountContext.CurrentUserACI">
            <summary>
            应用程序执行上下文中的数据项：当前用户实体。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.AccountContext.CurrentUser">
            <summary>
            获取当前登录的用户。如果没有登录，则此属性返回 null。
            <para>（获取逻辑：</para>
            <para>先尝试从 AppContext 中获取；</para>
            <para>如果没有找到，再尝试从 <see cref="P:Rafy.RafyEnvironment.Identity"/> 中对应的身份来解析用户对象；</para>
            <para>如果没有找到，如果<see cref="P:Rafy.Accounts.AccountsPlugin.IsUserNameInIdentity"/> 为真，则会使用用户名来查询数据库中的用户对象。</para>
            <para>最终，如果找到用户，则会把用户对象存储在 AppContext 中缓存起来。方便下次使用。）</para>
            开发者也可以直接设置本属性的值来指定当前的登录的用户。
            </summary>
        </member>
        <member name="T:Rafy.Accounts.AccountsPlugin">
            <summary>
            帐户插件。
            本插件中定义了用户实体及对应的领域控制器。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.AccountsPlugin.DbSettingName">
            <summary>
            本插件中所有实体对应的连接字符串的配置名。
            如果没有设置，则默认使用 <see cref="F:Rafy.Domain.DbSettingNames.RafyPlugins"/>。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.AccountsPlugin.IsUserNameInIdentity">
            <summary>
            获取或设置是否当前用户的用户名可以从 <see cref="P:Rafy.RafyEnvironment.Identity"/> 中的 <see cref="P:System.Security.Principal.IIdentity.Name"/> 属性获取。
            默认为 true。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.AccountsPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            Initializes the specified application.
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="T:Rafy.Accounts.Controllers.AccountController">
            <summary>
            帐户插件的领域控制器。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Accounts.Controllers.AccountController"/> class.
            </summary>
        </member>
        <member name="P:Rafy.Accounts.Controllers.AccountController.IdentityMode">
            <summary>
            是否使用用户名为登录标识。默认 <see cref="F:Rafy.Accounts.Controllers.UserIdentityMode.UserName"/>。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.Register(Rafy.Accounts.User)">
            <summary>
            注册指定的用户。
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="E:Rafy.Accounts.Controllers.AccountController.RegisterSuccessed">
            <summary>
            注册成功的事件。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.OnRegisterSuccessed(Rafy.Accounts.User)">
            <summary>
            注册成功的事件。
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:Rafy.Accounts.Controllers.AccountController.LoginFailedTimeSpan">
            <summary>
            一个时间间隔，表示当用户在这个时间间隔内的失败次数达到 <see cref="P:Rafy.Accounts.Controllers.AccountController.MaxLoginFailedTimes"/> 时，用户将不再能继续登录，直到时间过期。
            默认值：一个小时。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.Controllers.AccountController.MaxLoginFailedTimes">
            <summary>
            在指定时间间隔 <see cref="P:Rafy.Accounts.Controllers.AccountController.LoginFailedTimeSpan"/> 内，最多尝试登录失败的次数。
            默认值：0，表示不需要检测。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.LoginByUserName(System.String,System.String,Rafy.Accounts.User@)">
            <summary>
            尝试使用指定的用户名和密码进行登录操作。
            登录成功后，会重新设置 <see cref="P:Rafy.RafyEnvironment.Principal" /> 。
            </summary>
            <param name="userName">用户名。</param>
            <param name="password">用户密码。</param>
            <param name="user">不论登录是否成功，都返回对应的用户。（如果找不到，则返回 null。）</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.LoginByEmail(System.String,System.String,Rafy.Accounts.User@)">
            <summary>
            尝试使用指定的邮箱和密码进行登录操作。
            登录成功后，会重新设置 <see cref="P:Rafy.RafyEnvironment.Principal" /> 。
            </summary>
            <param name="email">用户名。</param>
            <param name="password">用户密码。</param>
            <param name="user">不论登录是否成功，都返回对应的用户。（如果找不到，则返回 null。）</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.LoginCore(Rafy.Accounts.User,System.String)">
            <summary>
            用指定的密码来尝试登录指定的用户。（登录的核心逻辑。）
            登录成功后，会重新设置 <see cref="P:Rafy.RafyEnvironment.Principal" /> 。
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="E:Rafy.Accounts.Controllers.AccountController.LoginSuccessed">
            <summary>
            登录成功的事件。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.OnLoginSuccessed(Rafy.Accounts.User)">
            <summary>
            登录成功的事件。
            </summary>
            <param name="user"></param>
        </member>
        <member name="E:Rafy.Accounts.Controllers.AccountController.LoginFailed">
            <summary>
            登录成功的事件。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.OnLoginFailed(Rafy.Accounts.User)">
            <summary>
            登录失败的事件。
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:Rafy.Accounts.Controllers.AccountController.HashAlgorithm">
            <summary>
            用户密码加密使用的加密算法。
            默认使用 SHA1。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.Controllers.AccountController.Encoding">
            <summary>
            密码使用的编码方式。
            默认使用 <see cref="P:System.Text.Encoding.UTF8"/>。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.EncodePassword(System.String)">
            <summary>
            计算指定密码的 Hash 值。
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Rafy.Accounts.Controllers.AccountController"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountController.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Rafy.Accounts.Controllers.AccountEventArgs">
            <summary>
            登录成功的事件参数。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.Controllers.AccountEventArgs.#ctor(Rafy.Accounts.User)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Accounts.Controllers.AccountEventArgs"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="P:Rafy.Accounts.Controllers.AccountEventArgs.User">
            <summary>
            对应的用户。
            </summary>
        </member>
        <member name="T:Rafy.Accounts.Controllers.UserIdentityMode">
            <summary>
            用户标识模式
            </summary>
        </member>
        <member name="F:Rafy.Accounts.Controllers.UserIdentityMode.UserName">
            <summary>
            用户名必填， 且是唯一标识。
            </summary>
        </member>
        <member name="F:Rafy.Accounts.Controllers.UserIdentityMode.Email">
            <summary>
            邮箱地址必填， 且是唯一标识。
            </summary>
        </member>
        <member name="T:Rafy.Accounts.Controllers.ResultCodes">
            <summary>
            本插件中所用到的所有状态码。
            </summary>
        </member>
        <member name="F:Rafy.Accounts.Controllers.ResultCodes.BaseCode">
            <summary>
            获取或设置本插件中所有状态码的基础状态码。
            其它的状态码都会在这个基础上进行添加。
            </summary>
        </member>
        <member name="T:Rafy.Accounts.User">
            <summary>
            系统中的用户
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.UserName">
            <summary>
            用户登录名
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.Email">
            <summary>
            邮件地址。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.RealName">
            <summary>
            真实姓名。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.Password">
            <summary>
            加密后的密码
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.LastLoginTime">
            <summary>
            最后一次尝试登录或登录成功的时间。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.LoginFailedTimes">
            <summary>
            尝试登录失败的次数。
            登录成功后，归0。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.PhoneNumber">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Rafy.Accounts.User.IsDisabled">
            <summary>
            当前用户是否已经被禁用。
            </summary>
        </member>
        <member name="T:Rafy.Accounts.UserList">
            <summary>
            系统中的用户 列表类。
            </summary>
        </member>
        <member name="P:Rafy.Accounts.UserList.Item(System.Int32)">
            <summary>
            获取或设置指定位置的实体。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserList.GetEnumerator">
            <summary>
            获取本实体列表的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserList.Concrete">
            <summary>
            返回子实体的强类型迭代接口，方便使用 Linq To Object 操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserList.Add(Rafy.Accounts.User)">
            <summary>
            添加指定的实体到集合中。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.UserList.Contains(Rafy.Accounts.User)">
            <summary>
            判断本集合是否包含指定的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserList.IndexOf(Rafy.Accounts.User)">
            <summary>
            判断指定的实体在本集合中的索引号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserList.Insert(System.Int32,Rafy.Accounts.User)">
            <summary>
            在指定的位置插入实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserList.Remove(Rafy.Accounts.User)">
            <summary>
            在集合中删除指定的实体。返回是否成功删除。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Accounts.UserRepository">
            <summary>
            系统中的用户 仓库类。
            负责 系统中的用户 类的查询、保存。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.#ctor">
            <summary>
            单例模式，外界不可以直接构造本对象。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByUserName(System.String)">
            <summary>
            通过用户名精确匹配指定的某个用户。
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByEmail(System.String)">
            <summary>
            通过邮箱精确匹配指定的某个用户。
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetActiveUsers(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取所有激活的用户。<see cref="F:Rafy.Accounts.User.IsDisabledProperty"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetDisabledUsers(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取所有禁用的用户。<see cref="F:Rafy.Accounts.User.IsDisabledProperty"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.CreateLinqQuery">
            <summary>
            创建一个实体类的 Linq 查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.New">
            <summary>
            创建一个新的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体类
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询单一实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Accounts.UserRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Accounts.UserConfig">
            <summary>
            系统中的用户 配置类。
            负责 系统中的用户 类的实体元数据的配置。
            </summary>
        </member>
        <member name="M:Rafy.Accounts.UserConfig.ConfigMeta">
            <summary>
            配置实体的元数据
            </summary>
        </member>
    </members>
</doc>
